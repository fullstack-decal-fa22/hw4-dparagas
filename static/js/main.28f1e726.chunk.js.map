{"version":3,"sources":["Components/Color.js","Components/Menu.js","Components/Block.js","Components/Feed.js","App.js","reportWebVitals.js","index.js"],"names":["Color","props","react_default","a","createElement","onClick","handleClick","color","Menu","className","Components_Color","Block","bgColor","background","data-testid","style","Feed","_useState","useState","_useState2","Object","slicedToArray","blocks","setBlocks","posts","map","block","i","Components_Block","key","Components_Menu","concat","toConsumableArray","App","Components_Feed","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"+NAWeA,EATD,SAACC,GAEX,OACIC,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMJ,EAAMK,YAAYL,EAAMM,SAAO,QAC5CN,EAAMM,QCUTC,EAZF,SAACP,GAEV,OACEC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBACXP,EAAAC,EAAAC,cAACM,EAAK,CAACJ,YAAaL,EAAMK,YAAaC,MAAM,QAC7CL,EAAAC,EAAAC,cAACM,EAAK,CAACJ,YAAaL,EAAMK,YAAaC,MAAM,SAC7CL,EAAAC,EAAAC,cAACM,EAAK,CAACJ,YAAaL,EAAMK,YAAaC,MAAM,SAC7CL,EAAAC,EAAAC,cAACM,EAAK,CAACJ,YAAaL,EAAMK,YAAaC,MAAM,YCYxCI,SApBD,SAACV,GAEX,IAAIM,EAAQN,EAAMM,MACZK,EAAU,CACZC,WAAYN,GAGhB,OAEIL,EAAAC,EAAAC,cAAA,OAAKU,cAAY,kBAKbZ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OAAOM,MAAOH,IAC7BV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WAAWF,MCYvBS,EAzBF,WAET,IAAAC,EAE4BC,mBAAS,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAjCK,EAAMH,EAAA,GAAEI,EAASJ,EAAA,GAOlBK,EAAQF,EAAOG,IAAI,SAACC,EAAOC,GAC7B,OAAOzB,EAAAC,EAAAC,cAACwB,EAAK,CAACC,IAAKF,EAAGpB,MAAOmB,MAGjC,OACIxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0B,EAAI,CAACxB,YAXM,SAACC,GACjBgB,EAAS,CAAEhB,GAAKwB,OAAAX,OAAAY,EAAA,EAAAZ,CAAKE,QAahBE,ICZES,MATf,WACE,OACE/B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAC8B,EAAI,QCIIC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHlD,EAAAC,EAAAC,cAACF,EAAAC,EAAMkD,WAAU,KACfnD,EAAAC,EAAAC,cAACkD,EAAG,QAORnB","file":"static/js/main.28f1e726.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Color = (props) => {\r\n\r\n    return (\r\n        <button onClick={() => props.handleClick(props.color)}>\r\n            Post {props.color}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Color;","import React from 'react';\r\n/* Add any imports you think you might need here! */\r\nimport Color from './Color';\r\n\r\nconst Menu = (props) => {\r\n\r\n    return (\r\n      <div className=\"colorOptions\">\r\n          <Color handleClick={props.handleClick} color=\"red\"></Color>\r\n          <Color handleClick={props.handleClick} color=\"pink\"></Color>\r\n          <Color handleClick={props.handleClick} color=\"blue\"></Color>\r\n          <Color handleClick={props.handleClick} color=\"green\"></Color>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Menu;","import '../Styles/Block.css';\r\nimport React from 'react';\r\n\r\nconst Block = (props) => {\r\n\r\n    let color = props.color;\r\n    const bgColor = {\r\n        background: color\r\n    }\r\n\r\n    return (\r\n        // ignore this data-testid, it's purely for testing :)\r\n        <div data-testid='main-component'>\r\n            {/* You'll notice pre-assigned class names 'post' and 'caption', \r\n            we took care of the basic block styling! \r\n            If curious, check out the css in Styles/Block.css */}\r\n            {/* Refer to hint if stuck on how to color the posts */}\r\n            <div className=\"post\" style={bgColor}></div>\r\n            <div className=\"caption\">{color}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Block;","import { useState } from 'react';\r\nimport React from 'react';\r\nimport Menu from './Menu';\r\nimport Block from './Block';\r\n\r\nconst Feed = () => {\r\n    /* TODO: Declare a new state variable to keep track of the blocks on your Blockstagram feed! */\r\n    // Refer to Hint 2 for more help!\r\n\r\n    const [blocks, setBlocks] = useState([]);\r\n\r\n    const handleClick = (color) => {\r\n        setBlocks([color, ...blocks]);\r\n    };\r\n\r\n    /* Use the map() function to render multiple Blocks! */\r\n    const posts = blocks.map((block, i) => {\r\n        return <Block key={i} color={block}></Block>\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Menu handleClick={handleClick}></Menu>\r\n\r\n            {/* Below is where all of your Blocks should render! */}\r\n            {posts}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Feed;","import './App.css';\r\nimport Feed from './Components/Feed';\r\nimport React from 'react';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Welcome to Blockstagram!</h1>\r\n      <Feed></Feed> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}